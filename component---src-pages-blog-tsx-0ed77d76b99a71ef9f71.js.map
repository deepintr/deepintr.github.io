{"version":3,"sources":["webpack:///./src/views/Blog/styles.ts","webpack:///./src/views/Blog/index.tsx","webpack:///./src/hooks/useLocalStorageState.ts","webpack:///./src/pages/blog.tsx","webpack:///./src/components/Pagination/index.tsx","webpack:///./src/components/Bulma/Breadcrumb/index.tsx"],"names":["styles","useStyles","createUseStyles","Blog","children","key","defaultVal","state","setState","posts","seoProps","useState","value","JSON","parse","window","localStorage","getItem","String","e","useEffect","setItem","stringify","blogPage","setBlogPage","pages","useMemo","sorted","filter","p","frontmatter","pinned","concat","items","length","push","splice","Main","SEO","Box","Breadcrumb","name","url","href","Columns","Column","PageContent","map","post","Post","fields","slug","Pagination","prev","onClick","rel","className","title","next","pageQuery","IndexPage","data","siteDesc","location","site","siteMetadata","description","allMarkdownRemark","edges","node","role","aria-label","parts","i","clsx","to"],"mappings":"qYAIeA,EAFQ,G,2zCCavB,IAAMC,EAAYC,0BAAgBF,GAkFnBG,EA1E8B,SAAC,GAIxC,EAHJC,SAGI,ICxBJC,EACAC,EACiD,EAC1CC,EAAOC,EDmBdC,EAEI,EAFJA,MACGC,EACC,6BACYT,IADZ,GCxBJI,ED0B6D,WCzB7DC,EDyByE,ECxBxB,EACvBK,oBAAY,WACpC,IAAIC,EACJ,IACEA,EAAQC,KAAKC,MACXC,OAAOC,aAAaC,QAAQZ,IAAQa,OAAOZ,IAE7C,MAAOa,GACPP,EAAQN,EAEV,OAAOM,KATFL,EAD0C,KACnCC,EADmC,KAajDY,qBAAU,WACRL,OAAOC,aAAaK,QAAQhB,EAAKQ,KAAKS,UAAUf,MAC/C,CAACA,EAAOF,IAEJ,CAACE,EAAOC,IDKX,IAEGe,EAFH,KAEaC,EAFb,KAIEC,EAAQC,mBAAQ,WAKpB,IAJA,IAAMC,EAASlB,EACZmB,QAAO,SAACC,GAAD,QAASA,EAAEC,YAAYC,UAC9BC,OAAOvB,EAAMmB,QAAO,SAACC,GAAD,OAAQA,EAAEC,YAAYC,WACvCE,EAA2B,GAC1BN,EAAOO,QACZD,EAAME,KAAKR,EAAOS,OAAO,EAhBR,KAkBnB,OAAOH,IACN,CAACxB,IAWJ,OACE,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAQ5B,GACT,kBAAC6B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYP,MAbsB,CACtC,CACEQ,KAAM,OACNC,IAAK,CACHC,KAAM,cAWR,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGrB,EAAMF,GAAUwB,KAAI,SAACC,GAAD,OACnB,kBAACC,EAAA,EAAD,CAAMD,KAAMA,EAAM3C,IAAK2C,EAAKE,OAAOC,UAGrC,kBAACC,EAAA,EAAD,CACEC,KACE5B,EAAMF,EAAW,IACf,uBACE+B,QAAS,kBAAM9B,EAAYD,EAAW,IACtCgC,IAAI,OACJC,UAAU,sBACVC,MAAM,uBAJR,eAUJC,KACEjC,EAAMF,EAAW,IACf,uBACE+B,QAAS,kBAAM9B,EAAYD,EAAW,IACtCgC,IAAI,OACJC,UAAU,kBACVC,MAAM,uBAJR,sBEjELE,GAFEC,UAPmC,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,KAC7CC,GADkE,EAAfC,SACxCF,EAAKG,KAAKC,aAAaC,aAClCzD,EAAQoD,EAAKM,kBAAkBC,MAErC,OAAO,kBAAC,EAAD,CAAMX,MAAOK,EAAUrD,MAAOA,EAAMsC,KAAI,SAAClB,GAAD,OAAOA,EAAEwC,WAKjC,e,kCCdzB,yBAgBejB,IAT+B,SAAC,GAAmB,IAAjBC,EAAiB,EAAjBA,KAAMK,EAAW,EAAXA,KACrD,OACE,yBAAKF,UAAU,aAAac,KAAK,aAAaC,aAAW,cACvD,8BAAOlB,GAAQA,GACf,8BAAOK,GAAQA,M,64BC0BNlB,IA5B+B,SAAC,GAAc,IAAZP,EAAY,EAAZA,MACzCuC,EAAwB,CAC5B,CACE/B,KAAM,WACNC,IAAK,CACHC,KAAM,OAJe,SAOtBV,IAGL,OACE,yBAAKuB,UAAU,iCAAiCe,aAAW,eACzD,4BACGC,EAAMzB,KAAI,WAAgB0B,GAAhB,IAAGhC,EAAH,EAAGA,KAAMC,EAAT,EAASA,IAAT,OACT,wBACErC,IAAG,0BAAqBoE,GACxBjB,UAAWkB,YAAK,CAAE,YAAaD,IAAMD,EAAMtC,OAAS,KAGpD,kBAAC,OAAD,CAAMyC,GAAIjC,EAAIC,MAAOF","file":"component---src-pages-blog-tsx-0ed77d76b99a71ef9f71.js","sourcesContent":["import { Styles } from 'react-jss';\n\nconst styles: Styles = {};\n\nexport default styles;\n","import React, { useMemo } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport MainLayout from '../../layouts/Main';\nimport Columns from '../../components/Bulma/Columns';\nimport Column from '../../components/Bulma/Column';\nimport Box from '../../components/Bulma/Box';\nimport Breadcrumb from '../../components/Bulma/Breadcrumb';\nimport PageContent from '../../components/PageContent';\nimport Post from '../../components/Post';\nimport Pagination from '../../components/Pagination';\nimport SEO, { SEOProps } from '../../components/SEO';\nimport { Data, Menu } from '../../models';\nimport { useLocalStorageState } from '../../hooks';\nimport styles from './styles';\n\nconst useStyles = createUseStyles(styles);\n\nexport interface BlogProps {\n  posts: Data.BlogPost[];\n}\n\nconst ITEMS_PER_PAGE = 10;\n\nconst Blog: React.FC<SEOProps & BlogProps> = ({\n  children,\n  posts,\n  ...seoProps\n}) => {\n  const classes = useStyles();\n  const [blogPage, setBlogPage] = useLocalStorageState<number>('blogPage', 0);\n\n  const pages = useMemo(() => {\n    const sorted = posts\n      .filter((p) => !!p.frontmatter.pinned)\n      .concat(posts.filter((p) => !p.frontmatter.pinned));\n    const items: Data.BlogPost[][] = [];\n    while (sorted.length) {\n      items.push(sorted.splice(0, ITEMS_PER_PAGE));\n    }\n    return items;\n  }, [posts]);\n\n  const breadcrumbItems: Menu.NavLink[] = [\n    {\n      name: 'Blog',\n      url: {\n        href: '/blog',\n      },\n    },\n  ];\n\n  return (\n    <MainLayout>\n      <SEO {...seoProps} />\n      <Box>\n        <Breadcrumb items={breadcrumbItems} />\n      </Box>\n      <Columns>\n        <Column>\n          <PageContent>\n            {pages[blogPage].map((post) => (\n              <Post post={post} key={post.fields.slug} />\n            ))}\n\n            <Pagination\n              prev={\n                pages[blogPage - 1] && (\n                  <a\n                    onClick={() => setBlogPage(blogPage - 1)}\n                    rel=\"prev\"\n                    className=\"pagination-previous\"\n                    title=\"Daha yeni içerikler\"\n                  >\n                    ← Daha yeni\n                  </a>\n                )\n              }\n              next={\n                pages[blogPage + 1] && (\n                  <a\n                    onClick={() => setBlogPage(blogPage + 1)}\n                    rel=\"next\"\n                    className=\"pagination-next\"\n                    title=\"Daha eski içerikler\"\n                  >\n                    Daha eski →\n                  </a>\n                )\n              }\n            />\n          </PageContent>\n        </Column>\n      </Columns>\n    </MainLayout>\n  );\n};\n\nexport default Blog;\n","import { useState, useEffect } from 'react';\n\nexport const useLocalStorageState = <T>(\n  key: string,\n  defaultVal: T,\n): [T, React.Dispatch<React.SetStateAction<T>>] => {\n  const [state, setState] = useState<T>(() => {\n    let value;\n    try {\n      value = JSON.parse(\n        window.localStorage.getItem(key) || String(defaultVal),\n      ) as T;\n    } catch (e) {\n      value = defaultVal;\n    }\n    return value;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state, key]);\n\n  return [state, setState];\n};\n","import React from 'react';\nimport { graphql, PageProps } from 'gatsby';\nimport Blog from '../views/Blog';\nimport { Data } from '../models';\n\nconst IndexPage: React.FC<PageProps<Data.Data>> = ({ data, location }) => {\n  const siteDesc = data.site.siteMetadata.description;\n  const posts = data.allMarkdownRemark.edges;\n\n  return <Blog title={siteDesc} posts={posts.map((p) => p.node)} />;\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          html\n          fields {\n            slug\n          }\n          frontmatter {\n            date\n            title\n            author\n            pinned\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\n\nexport interface PaginationProps {\n  prev?: React.ReactNode;\n  next?: React.ReactNode;\n}\n\nconst Pagination: React.FC<PaginationProps> = ({ prev, next }) => {\n  return (\n    <nav className=\"pagination\" role=\"navigation\" aria-label=\"pagination\">\n      <span>{prev && prev}</span>\n      <span>{next && next}</span>\n    </nav>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport clsx from 'clsx';\nimport { Menu } from '../../../models';\n\nexport interface BreadcrumbProps {\n  items: Menu.NavLink[];\n}\n\nconst Breadcrumb: React.FC<BreadcrumbProps> = ({ items }) => {\n  const parts: Menu.NavLink[] = [\n    {\n      name: 'Anasayfa',\n      url: {\n        href: '/',\n      },\n    },\n    ...items,\n  ];\n\n  return (\n    <nav className=\"breadcrumb has-arrow-separator\" aria-label=\"breadcrumbs\">\n      <ul>\n        {parts.map(({ name, url }, i) => (\n          <li\n            key={`breadcrumb-item-${i}`}\n            className={clsx({ 'is-active': i === parts.length - 1 })}\n          >\n            {/* Treat the all links as internal. */}\n            <Link to={url.href}>{name}</Link>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n"],"sourceRoot":""}