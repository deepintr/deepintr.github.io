{"version":3,"sources":["webpack:///./src/components/Pagination/index.tsx","webpack:///./src/components/Bulma/Breadcrumb/index.tsx","webpack:///./src/templates/BlogPost/styles.ts","webpack:///./src/templates/BlogPost/index.tsx"],"names":["Pagination","prev","next","className","role","aria-label","Breadcrumb","items","parts","name","url","href","map","i","key","clsx","length","to","styles","useStyles","createUseStyles","pageQuery","BlogPostTemplate","data","pageContext","previous","location","post","markdownRemark","breadcrumbItems","getUrlParts","fields","slug","blogPart","postPart","push","frontmatter","title","Main","SEO","description","excerpt","Box","Container","PageContent","Post","details","rel","summarize","getDisqusConfig"],"mappings":"2FAAA,yBAgBeA,IAT+B,SAAC,GAAmB,IAAjBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACrD,OACE,yBAAKC,UAAU,aAAaC,KAAK,aAAaC,aAAW,cACvD,8BAAOJ,GAAQA,GACf,8BAAOC,GAAQA,M,64BC0BNI,IA5B+B,SAAC,GAAc,IAAZC,EAAY,EAAZA,MACzCC,EAAwB,CAC5B,CACEC,KAAM,WACNC,IAAK,CACHC,KAAM,OAJe,SAOtBJ,IAGL,OACE,yBAAKJ,UAAU,iCAAiCE,aAAW,eACzD,4BACGG,EAAMI,KAAI,WAAgBC,GAAhB,IAAGJ,EAAH,EAAGA,KAAMC,EAAT,EAASA,IAAT,OACT,wBACEI,IAAG,0BAAqBD,GACxBV,UAAWY,YAAK,CAAE,YAAaF,IAAML,EAAMQ,OAAS,KAGpD,kBAAC,OAAD,CAAMC,GAAIP,EAAIC,MAAOF,W,4UCzBlBS,EAFQ,G,u8BCcvB,IAAMC,EAAYC,0BAAgBF,GAoFrBG,GAFEC,UA1EuD,SAAC,GAIjE,IAHJC,EAGI,EAHJA,KACAC,EAEI,EAFJA,YAKQC,GAHJ,EADJC,SAEgBP,IAEWK,EAAnBC,UAAUvB,EAASsB,EAATtB,KACZyB,EAAOJ,EAAKK,eAGZC,EAAkC,GAPpC,IAQyBC,YAAYH,EAAKI,OAAOC,MARjD,GAQGC,EARH,KAQaC,EARb,KAsBJ,OAbAL,EAAgBM,KAAK,CACnB1B,KAAM,OACNC,IAAK,CACHC,KAAM,IAAF,OAAMsB,MAGdJ,EAAgBM,KAAK,CACnB1B,KAAMkB,EAAKS,YAAYC,MACvB3B,IAAK,CACHC,KAAM,IAAF,OAAMuB,MAKZ,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEF,MAAOV,EAAKS,YAAYC,MACxBG,YAAab,EAAKS,YAAYI,aAAeb,EAAKc,UAEpD,kBAACC,EAAA,EAAD,KACE,kBAACpC,EAAA,EAAD,CAAYC,MAAOsB,KAErB,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMlB,KAAMA,EAAMmB,SAAO,IAEzB,kBAAC9C,EAAA,EAAD,CACEC,KACEwB,GACE,kBAAC,OAAD,CACER,GAAIQ,EAASM,OAAOC,KACpBe,IAAI,OACJ5C,UAAU,sBACVkC,MAAOZ,EAASW,YAAYC,OAJ9B,KAMKW,YAAUvB,EAASW,YAAYC,QAIxCnC,KACEA,GACE,kBAAC,OAAD,CACEe,GAAIf,EAAK6B,OAAOC,KAChBe,IAAI,OACJ5C,UAAU,kBACVkC,MAAOnC,EAAKkC,YAAYC,OAEvBW,YAAU9C,EAAKkC,YAAYC,OAN9B,SAYR,kBAACO,EAAA,EAAD,KACE,kBAAC,kBAAoBK,YAAgBtB,QAStB","file":"component---src-templates-blog-post-index-tsx-015f407104434d0cf2db.js","sourcesContent":["import React from 'react';\n\nexport interface PaginationProps {\n  prev?: React.ReactNode;\n  next?: React.ReactNode;\n}\n\nconst Pagination: React.FC<PaginationProps> = ({ prev, next }) => {\n  return (\n    <nav className=\"pagination\" role=\"navigation\" aria-label=\"pagination\">\n      <span>{prev && prev}</span>\n      <span>{next && next}</span>\n    </nav>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport clsx from 'clsx';\nimport { Menu } from '../../../models';\n\nexport interface BreadcrumbProps {\n  items: Menu.NavLink[];\n}\n\nconst Breadcrumb: React.FC<BreadcrumbProps> = ({ items }) => {\n  const parts: Menu.NavLink[] = [\n    {\n      name: 'Anasayfa',\n      url: {\n        href: '/',\n      },\n    },\n    ...items,\n  ];\n\n  return (\n    <nav className=\"breadcrumb has-arrow-separator\" aria-label=\"breadcrumbs\">\n      <ul>\n        {parts.map(({ name, url }, i) => (\n          <li\n            key={`breadcrumb-item-${i}`}\n            className={clsx({ 'is-active': i === parts.length - 1 })}\n          >\n            {/* Treat the all links as internal. */}\n            <Link to={url.href}>{name}</Link>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n","import { Styles } from 'react-jss';\n\nconst styles: Styles = {};\n\nexport default styles;\n","import React from 'react';\nimport { Link, graphql, PageProps } from 'gatsby';\nimport { createUseStyles } from 'react-jss';\nimport { DiscussionEmbed } from 'disqus-react';\nimport Container from '../../components/Bulma/Container';\nimport Breadcrumb from '../../components/Bulma/Breadcrumb';\nimport Box from '../../components/Bulma/Box';\nimport MainLayout from '../../layouts/Main';\nimport PageContent from '../../components/PageContent';\nimport SEO from '../../components/SEO';\nimport Post from '../../components/Post';\nimport Pagination from '../../components/Pagination';\nimport { Data, Menu } from '../../models';\nimport { getDisqusConfig, summarize, getUrlParts } from '../../utils';\nimport styles from './styles';\n\nconst useStyles = createUseStyles(styles);\n\ninterface PageContext {\n  slug: string;\n  previous: Data.BlogPost;\n  next: Data.BlogPost;\n}\n\nconst BlogPostTemplate: React.FC<PageProps<Data.Data, PageContext>> = ({\n  data,\n  pageContext,\n  location,\n}) => {\n  const classes = useStyles();\n\n  const { previous, next } = pageContext;\n  const post = data.markdownRemark;\n\n  // Calculate breadcrumb items.\n  const breadcrumbItems: Menu.NavLink[] = [];\n  const [blogPart, postPart] = getUrlParts(post.fields.slug);\n  breadcrumbItems.push({\n    name: 'Blog',\n    url: {\n      href: `/${blogPart}`,\n    },\n  });\n  breadcrumbItems.push({\n    name: post.frontmatter.title,\n    url: {\n      href: `/${postPart}`,\n    },\n  });\n\n  return (\n    <MainLayout>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <Box>\n        <Breadcrumb items={breadcrumbItems} />\n      </Box>\n      <Container>\n        <PageContent>\n          <Post post={post} details />\n\n          <Pagination\n            prev={\n              previous && (\n                <Link\n                  to={previous.fields.slug}\n                  rel=\"prev\"\n                  className=\"pagination-previous\"\n                  title={previous.frontmatter.title}\n                >\n                  ← {summarize(previous.frontmatter.title)}\n                </Link>\n              )\n            }\n            next={\n              next && (\n                <Link\n                  to={next.fields.slug}\n                  rel=\"next\"\n                  className=\"pagination-next\"\n                  title={next.frontmatter.title}\n                >\n                  {summarize(next.frontmatter.title)} →\n                </Link>\n              )\n            }\n          />\n        </PageContent>\n        <PageContent>\n          <DiscussionEmbed {...getDisqusConfig(post)} />\n        </PageContent>\n      </Container>\n    </MainLayout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date\n        description\n        author\n        pinned\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}